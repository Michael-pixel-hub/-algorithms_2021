"""
Задание 3.

Для этой задачи:
1) придумайте 2-3 решения (не менее двух) разной!! сложности
2) оцените сложность каждого решения в нотации О-большое
3) сделайте вывод, какое решение эффективнее и почему

Сама задача:
Имеется хранилище с информацией о компаниях: название и годовая прибыль.
Для реализации хранилища можно применить любой подход,
который вы придумаете, например, реализовать словарь.
Реализуйте поиск трех компаний с наибольшей годовой прибылью.
Выведите результат.

Примечание:
Без выполнения пунктов 2 и 3 задание считается нерешенным. Пункты 2 и 3 можно выполнить
через строки документации в самом коде.
Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.

Задание творческое. Здесь нет жестких требований к выполнению.
"""

# 1 способ (сложность О(n^2))
# Почему сложность О(n^2)? Потому что мы берем ту сложность, которая больше всего влияет на код. Так как у нас цикл
# в цикле, то сложность О(n^2).

dict_of_companies = {
    "ООО Москва": 10500000,
    "ООО Питер": 10600000,
    "ООО Омск": 10800000,
    "ООО Екатеренбург": 10900000,
    "ООО Владимир": 11000000,
} #O(1)

list_companies_profits = list(dict_of_companies.values()) #O(n)
list_max = [] #O(1)

for i in list_companies_profits: #O(n)
    _max = 0 #O(1)
    for b in list_companies_profits:#O(n)
        if _max < b and b not in list_max: #O(n)
            _max = b #O(1)
    list_max.append(_max) #O(1)
    if len(list_max) == 3: #O(n)
        break #O(1)

for k,v in dict_of_companies.items(): #O(n)
    if v in list_max: #O(n)
        print(f'Компания {k}, годовая прибыль {v}') #O(1)

# 2 способ (сложность O(n))
# Почему сложность O(n)? Потому что мы берем ту сложность, которая больше всего влияет на код. Так как у нас
# нет вложенного цикла с одним неизвестным числом n, то берем O(n).

list_companies_profits = list(dict_of_companies.values()) #O(n)
list_max = [] #O(1)
ind = len(list_companies_profits) #O(1)

while ind > 0: #O(n)
    _max = 0 #O(1)
    for b in list_companies_profits: #O(n)
        if _max < b and b not in list_max: #O(n)
            _max = b #O(1)
    list_max.append(_max) #O(1)
    if len(list_max) == 3: #O(n)
        break #O(1)
    ind = ind - 1 #O(1)
for k,v in dict_of_companies.items(): #O(n)
    if v in list_max: #O(n)
        print(f'Компания {k}, годовая прибыль {v}') #O(1)

# Второй способ более эффективнее, так как это линейная сложность. Она затрачивает меньше времени и выделяемой памяти