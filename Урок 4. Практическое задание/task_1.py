"""
Задание 1.

Приведен код, который позволяет сохранить в
массиве индексы четных элементов другого массива

Сделайте замеры времени выполнения кода с помощью модуля timeit

Оптимизируйте, чтобы снизить время выполнения
Проведите повторные замеры.

Добавьте аналитику: что вы сделали и почему!!!
Без аналитики задание не принимается

И прошу вас обратить внимание, что то, что часто ошибочно называют генераторами списков,
на самом деле к генераторам отношения не имеет. Это называется "списковое включение" - list comprehension.
"""

import timeit

def func_1(nums):
    new_arr = []
    for i in range(len(nums)):
        if nums[i] % 2 == 0:
            new_arr.append(i)
    return new_arr

print(timeit.timeit(stmt="func_1([1,2,3])", setup="from __main__ import func_1",  number=10000))

"""
Скорость 0.015165299999999996. Следующая функция будет оптимизирована "списковым включением"
"""

def func_2(nums_2):
    new_arr_2 = [el for el in range(len(nums_2)) if nums_2[el] % 2 == 0]
    return new_arr_2

a = func_2([1,2,3,4,5,6,7,8])

print(a[0])
print(timeit.timeit(stmt="func_2([1,2,3])", setup="from __main__ import func_2",  number=10000))

"""
Скорость 0.009961700000000004. Списковое включение оказалось быстрее, так как не используем метод append"
"""